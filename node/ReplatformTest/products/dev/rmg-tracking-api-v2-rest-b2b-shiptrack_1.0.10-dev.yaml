swagger: '2.0'
info:
  x-ibm-name: rmg-tracking-api-v2-rest-b2b-shiptrack
  title: RMG Tracking API V2 (REST) B2B Shiptrack
  version: 1.0.10-dev
schemes:
  - https
consumes:
  - application/xml
produces:
  - application/xml
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
security:
  - clientIdHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
      - operation-switch:
          title: operation-switch
          case:
            - operations:
                - verb: post
                  path: /shiptrack
              execute:
                - map:
                    title: map
                    inputs:
                      input:
                        schema:
                          $ref: '#/definitions/AmazonRequest'
                        variable: request.body
                        content: application/xml
                    outputs:
                      output:
                        schema:
                          $ref: '#/definitions/AmazonRequest'
                        variable: message.body
                        content: application/json
                      X-RMG-Client-Id:
                        schema:
                          type: string
                        variable: message.headers.X-RMG-Client-Id
                    actions:
                      - set: output.AmazonTrackingRequest.APIVersion
                        from: input.AmazonTrackingRequest.APIVersion
                      - set: output.AmazonTrackingRequest.TrackingNumber
                        from: input.AmazonTrackingRequest.TrackingNumber
                      - set: X-RMG-Client-Id
                        default: $(client.app.id)
                    version: 1.0.0
                    options:
                      includeEmptyXMLElements: false
                      namespaceInheritance: false
                      inlineNamespaces: false
                - gatewayscript:
                    title: gatewayscript
                    version: 1.0.0
                    source: "var responseBody = apim.getvariable('message.body');\nvar mpId_1 = responseBody.AmazonTrackingRequest.TrackingNumber;\nvar version  = responseBody.AmazonTrackingRequest.APIVersion;\napim.setvariable('version',version);\n\n  var mpId = mpId_1.trim();\n  \n  var errorResponse = {\n\t\"AmazonTrackingResponse\": {\n\t\t\"APIVersion\": version,\n\t\t\"TrackingErrorInfo\": {\n\t\t\t\"TrackingNumber\": mpId,\n\t\t\t\"TrackingErrorDetail\": {\n\t\t\t\t\"ErrorDetailCode\": \"ERROR_102\",\n\t\t\t\t\"ErrorDetailCodeDesc\": \"NO TRACKING INFO FOUND\"\n\t\t\t}\n\t\t}\n\t}\n}\n    \n  if ((  mpId.length === 11 || mpId.length === 16 || mpId.length === 21 ) && (mpId.match(\"^[a-zA-Z0-9]*$\"))) {\n     \n    apim.setvariable('mpId',mpId);\n    \n    } \n    \n   else if(mpId.length === 13 && (mpId.match(\"^[a-zA-Z0-9]*$\"))){\n        /*if(mpId.match(/(CK|CP|CU|EA|EB|EC|ED|EE|EK|EH|EU)[0-9]{9}[GB]{2}/)[0]){\n         apim.setvariable('errorResponse',errorResponse);   \n        }else if(mpId.match(/3S[A-Z]{4}[0-9]{7}/)){\n         apim.setvariable('errorResponse',errorResponse); \n        }else if(mpId.match(/9[A-Z]{4}[0-9]{8}/)){\n         apim.setvariable('errorResponse',errorResponse); \n        }else if(mpId.match(/8E[0-9]{11}/)){\n         apim.setvariable('errorResponse',errorResponse); \n        }else if(mpId.match(/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][A-Z]{2}/)){\n         apim.setvariable('errorResponse',errorResponse); \n        }else if(mpId.match(/3E[0-9]{11}/)){\n         apim.setvariable('errorResponse',errorResponse);\n        }else if(mpId.match(/[A-Z]{4}[0-9]{7}GB/)){\n         apim.setvariable('errorResponse',errorResponse); \n        }else if(mpId.match(/(C[A-Z]|E[A-Z]|B[A-Z]|PA|N[D-S])[0-9]{9}^[GB]{2}/)){\n         apim.setvariable('errorResponse',errorResponse);\n        }else{*/\n        apim.setvariable('mpId',mpId); \n        }\n \n  else {\n  \n  apim.setvariable('errorResponse',errorResponse);\n\n  } "
                - switch:
                    title: switch
                    case:
                      - condition: "apim.getvariable('errorResponse')"
                        execute:
                          - gatewayscript:
                              title: gatewayscript
                              version: 1.0.0
                              source: >+
                                apim.setvariable('message.body',apim.getvariable('errorResponse'));

                                apim.setvariable('message.status.code','404');

                                apim.output('application/json');

























                      - otherwise:
                          - invoke:
                              title: invoke
                              timeout: 10
                              verb: GET
                              cache-response: time-to-live
                              version: 1.0.0
                              target-url: $(cloudantEndpoint)/shipTrack_1
                              username: $(username)
                              password: $(password)
                              output: dictionary
                              cache-ttl: 600
                          - invoke:
                              title: invoke-ESB
                              timeout: 10
                              verb: GET
                              cache-response: time-to-live
                              version: 1.0.0
                              tls-profile: onboarding-pre-prod-test-ca2
                              target-url: $(endpoint)/$(mpId)/events
                              output: eventsResponse
                              cache-ttl: 600
                          - gatewayscript:
                              title: gatewayscript
                              version: 1.0.0
                              source: "var dictionary = apim.getvariable('dictionary.body');\r\nvar eventsResponse = apim.getvariable('eventsResponse.body');\r\nvar eventCodeDictionary = dictionary.eventCodeDictonary;\r\nvar errorDictionary= dictionary.errorDictionary;\r\nvar version  = apim.getvariable('version');\r\n\r\nif(eventsResponse.integrationFooter) {\r\n\tbuildOutputErrorMessage(eventsResponse, function (errorResponse) {\r\n\tsession.output.write(errorResponse);\r\n\t\tapim.output('application/json');\r\n\t\t\r\n\t});\r\n} else {\r\n\tbuildOutputMessage(eventsResponse, function (response) {\r\n\tsession.output.write(response);\r\n\t\tapim.output('application/json');\r\n\t\t\r\n\t});\r\n}\r\n\r\nfunction buildOutputErrorMessage(response, callback) {\r\n\tvar errorTrackingNo = apim.getvariable('message.body.AmazonTrackingRequest.TrackingNumber');\r\n\tlookupErrorCode(response.integrationFooter.errors[0].errorCode, function (errorObject) {\r\n\t\tif(errorObject.lookupfailed) {\r\n\t\t\tconsole.log(\"Failed to find corresponding error detail for code: \" + response.integrationFooter.errors[0].errorCode);\r\n\t\t\t\tvar errorResponse = {\r\n\t                    \"AmazonTrackingResponse\": {\r\n\t\t                \"APIVersion\": version,\r\n\t\t                \"TrackingErrorInfo\": {\r\n\t\t\t            \"TrackingNumber\": mpId,\r\n\t\t\t            \"TrackingErrorDetail\": {\r\n\t\t\t\t        \"ErrorDetailCode\": \"ERROR_301\",\r\n\t\t\t\t        \"ErrorDetailCodeDesc\": \"TRACKING SERVICE NOT AVAILABLE\"\r\n\t\t\t          }\r\n\t\t            }\r\n        \t    }\r\n            }\r\n\t\t\treturn callback(errorResponse);\r\n\t\t}\r\n\t\tvar errorTemplate = {\r\n\t\t\t\"AmazonTrackingResponse\": {\r\n\t\t\t\t\"APIVersion\": version,\r\n\t\t\t\t\"TrackingErrorInfo\": {\r\n\t\t\t\t\t\"TrackingNumber\": errorTrackingNo,\r\n\t\t\t\t\t\"TrackingErrorDetail\": {\r\n\t\t\t\t\t\t\"ErrorDetailCode\": errorObject.ErrorDetailCode,\r\n\t\t\t\t\t\t\"ErrorDetailCodeDesc\": errorObject.ErrorDetailCodeDesc\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tconsole.log(errorTemplate);\r\n\t\treturn callback(errorTemplate);\r\n\t});\r\n}\r\n\r\nfunction buildOutputMessage(response, callback) {\r\n\tvar template = {\r\n\t\t\"AmazonTrackingResponse\": {\r\n\t\t\t\"APIVersion\": version,\r\n\t\t\t\"PackageTrackingInfo\": {\r\n\t\t\t\t\"TrackingNumber\": \"\",\r\n\t\t\t\t\"PackageDestinationLocation\": {\r\n\t\t\t\t\t\"City\": \"\",\r\n\t\t\t\t\t\"CountryCode\": \"\"\r\n\t\t\t\t},\r\n\t\t\t\t\"TrackingEventHistory\": []\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tif(response.mailPieces.summary){\r\n\t\ttemplate.AmazonTrackingResponse.PackageTrackingInfo.TrackingNumber = response.mailPieces.mailPieceId;\r\n\t\ttemplate.AmazonTrackingResponse.PackageTrackingInfo.PackageDestinationLocation.City = response.mailPieces.summary.destinationCountryName;\r\n\t\t}\r\n\t// IF THERE IS AN EVENTS ARRAY, POPULATE THE EVENT DETAILS FROM THIS\r\n\r\n\t\t\r\n\t\t// IF THERE IS NO EVENTS ARRAY BUT THERE IS A SUMMARY, POPULATE THE EVENT DETAIL FROM THIS\r\n    if(response.mailPieces.events && response.mailPieces.summary) {\r\n\t       if(!response.mailPieces.events[0].eventCode){\r\n\t\t    lookupCode(response.mailPieces.summary.lastEventCode, function (lookupResult) {\r\n\t\t\tif(!response.mailPieces.summary.lastEventCountryCode) {\r\n\t\t\t\tresponse.mailPieces.summary.lastEventCountryCode = \"\";\r\n\t\t\t}\r\n\t\t\tif(!response.mailPieces.summary.lastEventLocationName) {\r\n\t\t\t\tresponse.mailPieces.summary.lastEventLocationName = \"\";\r\n\t\t\t}\r\n\t\t\tif(lookupResult.lookupfailed) {\r\n\t\t\t console.log(\"Failed to find corresponding event status and reason for code: \" + response.mailPieces.summary.lastEventCode);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar trackingEventDetail = {\r\n\t\t\t\tTrackingEventDetail: {\r\n\t\t\t\t\t\"EventStatus\": lookupResult[\"EventStatus\"],\r\n\t\t\t\t\t\"EventReason\": lookupResult[\"EventReason\"],\r\n\t\t\t\t\t\"EventDateTime\": response.mailPieces.summary.lastEventDateTime,\r\n\t\t\t\t\t\"EventLocation\": {\r\n\t\t\t\t\t\t\"City\": response.mailPieces.summary.lastEventLocationName,\r\n\t\t\t\t\t\t\"CountryCode\": response.mailPieces.summary.lastEventCountryCode\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\ttemplate.AmazonTrackingResponse.PackageTrackingInfo.TrackingEventHistory.push(trackingEventDetail);\r\n\t\t\treturn callback(template);\r\n\t\t});\r\n\t\t// IF THERE IS NO EVENTS ARRAY AND NO SUMMARY, SOMETHING HAS PROBABLY GONE WRONG\r\n\t} \r\n\telse{\r\n\tresponse.mailPieces.events.forEach(function (element, index) {\r\n\t\t\tlookupCode(element.eventCode, function (lookupResult) {\r\n\t\t\t\tif(!element.CountryCode) {\r\n\t\t\t\t\telement.CountryCode = '';\r\n\t\t\t\t}\r\n\t\t\t\tif(!element.locationName) {\r\n\t\t\t\t\telement.locationName = '';\r\n\t\t\t\t}\r\n\t\t\t\tif(lookupResult.lookupfailed) {\r\n\t\t\t\t\tconsole.error(\"Failed to find corresponding event status and reason for code: \" + element.eventCode);\r\n\t\t\t\t\t//return callback({\"Status\": \"Failed to find corresponding event status and reason for code \" + element.eventCode});\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tconsole.log(lookupResult);\r\n\t\t\t\tvar trackingEventDetail = {\r\n\t\t\t\t\tTrackingEventDetail: {\r\n\t\t\t\t\t\t\"EventStatus\": lookupResult[\"EventStatus\"],\r\n\t\t\t\t\t\t\"EventReason\": lookupResult[\"EventReason\"],\r\n\t\t\t\t\t\t\"EventDateTime\": element.eventDateTime,\r\n\t\t\t\t\t\t\"EventLocation\": {\r\n\t\t\t\t\t\t\t\"City\": element.locationName,\r\n\t\t\t\t\t\t\t\"CountryCode\": element.CountryCode\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\ttemplate.AmazonTrackingResponse.PackageTrackingInfo.TrackingEventHistory.push(trackingEventDetail);\r\n\t\t\t\treturn callback(template);\r\n\t\t\t});\r\n\t\t});\r\n\t\r\n\t}\r\n\t}\r\n\t else if(!response.mailPieces.events && response.mailPieces.summary) {\r\n\t\tlookupCode(response.mailPieces.summary.lastEventCode, function (lookupResult) {\r\n\t\t\tif(!response.mailPieces.summary.lastEventCountryCode) {\r\n\t\t\t\tresponse.mailPieces.summary.lastEventCountryCode = \"\";\r\n\t\t\t}\r\n\t\t\tif(!response.mailPieces.summary.lastEventLocationName) {\r\n\t\t\t\tresponse.mailPieces.summary.lastEventLocationName = \"\";\r\n\t\t\t}\r\n\t\t\tif(lookupResult.lookupfailed) {\r\n\t\t\t console.log(\"Failed to find corresponding event status and reason for code: \" + response.mailPieces.summary.lastEventCode);\r\n\t\t\t\treturn callback({\"Status\": \"Failed to find corresponding event status and reason for code \" + element.eventCode});\r\n\t\t\t}\r\n\t\t\tvar trackingEventDetail = {\r\n\t\t\t\tTrackingEventDetail: {\r\n\t\t\t\t\t\"EventStatus\": lookupResult[\"EventStatus\"],\r\n\t\t\t\t\t\"EventReason\": lookupResult[\"EventReason\"],\r\n\t\t\t\t\t\"EventDateTime\": response.mailPieces.summary.lastEventDateTime,\r\n\t\t\t\t\t\"EventLocation\": {\r\n\t\t\t\t\t\t\"City\": response.mailPieces.summary.lastEventLocationName,\r\n\t\t\t\t\t\t\"CountryCode\": response.mailPieces.summary.lastEventCountryCode\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\ttemplate.AmazonTrackingResponse.PackageTrackingInfo.TrackingEventHistory.push(trackingEventDetail);\r\n\t\t\treturn callback(template);\r\n\t\t});\r\n\t\t// IF THERE IS NO EVENTS ARRAY AND NO SUMMARY, SOMETHING HAS PROBABLY GONE WRONG\r\n\t}else {\r\n\t\tconsole.log('no events');\r\n\t\treturn callback({\r\n\t\t\t\"Error\": \"Could not find event history\"\r\n\t\t});\r\n\t}\r\n}\r\n\r\nfunction lookupCode(eventCode, callback) {\r\n\tvar eventObject;\r\n\tif(eventCodeDictionary[eventCode]) {\r\n\t\teventObject = eventCodeDictionary[eventCode];\r\n\t} else if(eventCode.match(/RM[a-zA-Z0-9]A/)) {\r\n\t\teventObject = eventCodeDictionary[\"RM*A\"];\r\n\t} else if(eventCode.match(/RM[a-zA-Z0-9]I/)) {\r\n\t\teventObject = eventCodeDictionary[\"RM*I\"];\r\n\t} else if(eventCode.match(/RM[a-zA-Z0-9]P/)) {\r\n\t\teventObject = eventCodeDictionary[\"RM*P\"];\r\n\t} else {\r\n\t\t// Return Stock response / error\r\n\t\treturn callback({\r\n\t\t\t\"lookupfailed\": true\r\n\t\t});\r\n\t}\r\n\treturn callback(eventObject);\r\n}\r\n\r\nfunction lookupErrorCode(errorCode, callback) {\r\n\tvar eventObject;\r\n\tif(errorDictionary[errorCode]) {\r\n\t\teventObject = errorDictionary[errorCode];\r\n\t} else {\r\n\t\treturn callback({\r\n\t\t\t\"lookupfailed\": true\r\n\t\t});\r\n\t}\r\n\treturn callback(eventObject);\r\n}\r\n\t\t\r\n"
                    version: 1.0.0
                - json-to-xml:
                    title: json-to-xml
                    root-element-name: json
                    always-output-root-element: false
                    version: 1.0.0
          otherwise: []
          version: 1.0.0
    catch:
      - default:
          - gatewayscript:
              title: gatewayscript
              version: 1.0.0
              source: "  var mpId = apim.getvariable('mpId');\n  var version = apim.getvariable('version');\n  var errorResponse = {\n\t\"AmazonTrackingResponse\": {\n\t\t\"APIVersion\": version,\n\t\t\"TrackingErrorInfo\": {\n\t\t\t\"TrackingNumber\": mpId,\n\t\t\t\"TrackingErrorDetail\": {\n\t\t\t\t\"ErrorDetailCode\": \"ERROR_301\",\n\t\t\t\t\"ErrorDetailCodeDesc\": \"TRACKING SERVICE NOT AVAILABLE\"\n\t\t\t}\n\t\t}\n\t}\n}\n\napim.setvariable('message.body',errorResponse);\napim.setvariable('message.status.code','500');\napim.output('application/json');"
          - json-to-xml:
              title: json-to-xml
              root-element-name: json
              always-output-root-element: false
              version: 1.0.0
  phase: realized
  properties:
    cloudantEndpoint:
      value: 'https://0a16cbcf-ea89-475d-861a-4b4245404bda-bluemix.cloudant.com/config'
      description: ''
      encoded: false
    password:
      value: 3ce292febfe64b6b34ec66b8a80cc2107e689fa7c75b971114a38770be61457c
      description: ''
      encoded: false
    username:
      value: 0a16cbcf-ea89-475d-861a-4b4245404bda-bluemix
      description: ''
      encoded: false
    endpoint:
      value: 'http://129.185.160.215:8088/mailpieces/v2'
      description: ''
      encoded: false
paths:
  /shiptrack:
    post:
      responses:
        '200':
          description: 200 OK
      parameters:
        - name: amazonRequest
          required: true
          in: body
          description: The request that would come from amazon
          schema:
            $ref: '#/definitions/AmazonRequest'
tags: []
basePath: /amazon
definitions:
  AmazonRequest:
    description: ''
    type: object
    properties:
      AmazonTrackingRequest:
        type: object
        properties:
          Validation:
            type: object
            properties:
              UserID:
                type: string
              Password:
                type: string
            xml:
              namespace: ''
          APIVersion:
            type: number
            format: float
          TrackingNumber:
            type: string
        xml:
          namespace: ''
    xml:
      namespace: ''
    example: "<AmazonTrackingRequest>\r\n<Validation>\r\n<UserID>AMZN</UserID>\r\n<Password>cEtRa4rEtUCechuk</Password>\r\n</Validation>\r\n<APIVersion>4.0</APIVersion>\r\n<TrackingNumber>SD084030671GB</TrackingNumber>\r\n</AmazonTrackingRequest>\r\n"
