swagger: '2.0'
info:
  x-ibm-name: passwordtest
  title: passwordTest
  version: 1.0.0
schemes:
  - https
host: $(catalog.host)
basePath: /passwordtest
consumes:
  - application/json
  - text
produces:
  - application/json
  - text
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
security:
  - clientIdHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
      - operation-switch:
          title: operation-switch
          case:
            - operations:
                - verb: get
                  path: /token
              execute:
                - gatewayscript:
                    title: gatewayscript
                    version: 1.0.0
                    source: "\r\n\r\nvar Utils = {\r\n\r\n    hex_chr: \"0123456789abcdef\",\r\n\r\n    hex: function (num) {\r\n        var str = \"\";\r\n        for (var j = 7; j >= 0; j--)\r\n            str += this.hex_chr.charAt((num >> (j * 4)) & 0x0F);\r\n        return str;\r\n    },\r\n\r\n    str2blks_SHA1: function (str) {\r\n        var nblk = ((str.length + 8) >> 6) + 1;\r\n        var blks = new Array(nblk * 16);\r\n        for (var i = 0; i < nblk * 16; i++) blks[i] = 0;\r\n        for (i = 0; i < str.length; i++)\r\n            blks[i >> 2] |= str.charCodeAt(i) << (24 - (i % 4) * 8);\r\n        blks[i >> 2] |= 0x80 << (24 - (i % 4) * 8);\r\n        blks[nblk * 16 - 1] = str.length * 8;\r\n        return blks;\r\n    },\r\n\r\n    add: function (x, y) {\r\n        var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n        return (msw << 16) | (lsw & 0xFFFF);\r\n    },\r\n\r\n    rol: function (num, cnt) {\r\n        return (num << cnt) | (num >>> (32 - cnt));\r\n    },\r\n\r\n    ft: function (t, b, c, d) {\r\n        if (t < 20) return (b & c) | ((~b) & d);\r\n        if (t < 40) return b ^ c ^ d;\r\n        if (t < 60) return (b & c) | (b & d) | (c & d);\r\n        return b ^ c ^ d;\r\n    },\r\n\r\n\r\n    kt: function (t) {\r\n        return (t < 20) ? 1518500249 : (t < 40) ? 1859775393 :\r\n          (t < 60) ? -1894007588 : -899497514;\r\n    },\r\n\r\n    calcSHA1FromByte: function (byteArr) {\r\n        var str = '';\r\n        for (var i = 0; i < byteArr.length; i++)\r\n            str += String.fromCharCode(byteArr[i]);\r\n        return this.calcSHA1(str);\r\n    },\r\n\r\n    calcSHA1: function (str) {\r\n        if (str != '') {\r\n            var x = this.str2blks_SHA1(str);\r\n            var w = new Array(80);\r\n\r\n            var a = 1732584193;\r\n            var b = -271733879;\r\n            var c = -1732584194;\r\n            var d = 271733878;\r\n            var e = -1009589776;\r\n\r\n            for (var i = 0; i < x.length; i += 16) {\r\n                var olda = a;\r\n                var oldb = b;\r\n                var oldc = c;\r\n                var oldd = d;\r\n                var olde = e;\r\n\r\n                for (var j = 0; j < 80; j++) {\r\n                    if (j < 16) w[j] = x[i + j];\r\n                    else w[j] = this.rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\r\n                    var t = this.add(this.add(this.rol(a, 5), this.ft(j, b, c, d)), this.add(this.add(e, w[j]), this.kt(j)));\r\n                    e = d;\r\n                    d = c;\r\n                    c = this.rol(b, 30);\r\n                    b = a;\r\n                    a = t;\r\n                }\r\n\r\n                a = this.add(a, olda);\r\n                b = this.add(b, oldb);\r\n                c = this.add(c, oldc);\r\n                d = this.add(d, oldd);\r\n                e = this.add(e, olde);\r\n            }\r\n            return this.hex(a) + this.hex(b) + this.hex(c) + this.hex(d) + this.hex(e);\r\n        } else {\r\n            return '';\r\n        }\r\n    },\r\n\r\n    stringToBytes: function (str) {\r\n        var result = [];\r\n        for (var i = 0; i < str.length; i++) {\r\n            result.push(str.charCodeAt(i));\r\n        }\r\n        return result;\r\n    },\r\n\r\n    hexToBytes: function (hex) {\r\n        for (var bytes = [], c = 0; c < hex.length; c += 2)\r\n            bytes.push(parseInt(hex.substr(c, 2), 16));\r\n        return bytes;\r\n    },\r\n\r\n    bytesToString: function (array) {\r\n        return String.fromCharCode.apply(String, array);\r\n    },\r\n\r\n    getRandomInteger: function (min, max) {\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n};\r\n\r\n// Get nonce and var password = \"PasswordDigest Ext\";\r\n\r\nvar nonce = Utils.getRandomInteger(9999,10000000000).toString();\r\nvar created = new Date().toISOString();\r\n\r\n\r\nvar password = apim.getvariable('request.headers.x-rmg-password');\r\n\r\n\r\n// Convert all values to their byte equivalent \r\nvar nonceBytes = Utils.stringToBytes(nonce);\r\nvar createdBytes = Utils.stringToBytes(created);\r\n\r\n// Decode password into hex and convert to bytes\r\n\r\nvar hashPasswordHex = new Buffer(password, 'base64').toString('hex')\r\nvar hashPasswordBytes = Utils.hexToBytes(hashPasswordHex);\r\n\r\n// Concatenate the Nonce, Created and the hashed password byte arrays\r\nvar concatPasswordBytes = nonceBytes.concat(createdBytes, hashPasswordBytes);\r\n\r\n// Hash the concatenated value to generate the password digest\r\nvar hexPasswordDigest = Utils.calcSHA1FromByte(concatPasswordBytes);\r\n\r\n// Get the Digest string\r\nvar passwordDigestBytes = Utils.hexToBytes(hexPasswordDigest);\r\nvar strPasswordDigest = Utils.bytesToString(passwordDigestBytes);\r\n\r\n// Encode the password digest\r\nvar bufferEncodePassword = new Buffer(strPasswordDigest,\"ascii\");\r\nvar encodedDigest = bufferEncodePassword.toString(\"base64\");\r\n\r\n// Encode the nonce\r\nvar bufferEncodeNonce = new Buffer(nonce,\"ascii\");\r\nvar encodedNonce = bufferEncodeNonce.toString(\"base64\");\r\n\r\n\r\napim.setvariable('digest', encodedDigest ); \r\napim.setvariable('nonce', encodedNonce );\r\napim.setvariable('created', created );\r\n\r\napim.setvariable('message.body', 'token');\r\n\r\n"
            - operations:
                - verb: get
                  path: /OpA
              execute:
                - gatewayscript:
                    title: gatewayscript
                    version: 1.0.0
                    source: "apim.setvariable('message.body', 'OpA');"
          otherwise: []
          version: 1.0.0
      - gatewayscript:
          title: gatewayscript
          version: 1.0.0
          source: "apim.setvariable('message.status.code', '503');"
    catch: []
  phase: realized
  gateway: datapower-gateway
paths:
  /OpB:
    get:
      responses:
        '200':
          description: 200 OK
  /OpA:
    get:
      responses:
        '200':
          description: 200 OK
  /token:
    get:
      responses:
        '200':
          description: 200 OK
    parameters:
      - name: X-RMG-Password
        type: string
        required: true
        in: header
definitions: {}
tags: []
