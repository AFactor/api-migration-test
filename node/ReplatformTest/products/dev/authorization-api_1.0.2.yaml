swagger: '2.0'
info:
  x-ibm-name: authorization-api
  title: Authorization API
  version: 1.0.2
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientSecret:
    type: apiKey
    description: ''
    in: header
    name: X-IBM-Client-Secret
  clientId:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
security:
  - clientId: []
    clientSecret: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
      - set-variable:
          title: set-variable
          actions:
            - value: '{ "alg": "HS256",   "kty": "oct",   "use": "sig",   "k": "ycsjclSb2dcdnJ-VobQLWeXBYUsFsPS8MddhqQ9N0d1CWWMms0FQH70SJQX2RcrTamhzyNniXtbLf47qDLJ6JI75oU-uUTHstpyzON1FQtpHIGajMaScIn4ZdT9pzgVwR7Ll1y_9wGBLeLW5Pqy0MhQDUO62BTB8hJ6CE8S9y4WwwrPD5Zj-jNDlSeZyAFnaa573SyITxwgDuMHgmIuKkt02ByWhS2mrTKCSOfdPIP_QdUPqbyixOji8A5fsoO65gAxzxvVfZNN4JgwHGRfllj5lH1nljL0MYlWGJ7i5iqvxp0-EAKgiHf8QsRWNXbpp03mGCXsz2XpnO6P9Kx7abw",   "kid": "hs256-key" }'
              add: hs256-key
          version: 1.0.0
      - switch:
          title: switch
          case:
            - condition: "apim.getvariable('request.parameters.userId')"
              execute:
                - gatewayscript:
                    title: gatewayscript
                    version: 1.0.0
                    source: "var userId = apim.getvariable('request.parameters.userId');\nvar origin = apim.getvariable('request.headers.origin');\nif (userId == 'apimonitor' && testDomain(origin)){\n    var aud = \"TAPIv2\";\n    var issEBiz = \"eBusiness\";\n    var issAPIc = \"apiconnect\";\n    var sub = apim.getvariable('request.parameters.userId');\n    apim.setvariable('sub',sub);\n    apim.setvariable('issEBiz',issEBiz);\n    apim.setvariable('aud',aud);\n    apim.setvariable('issAPIc',issAPIc);\n}\nelse {\n    var errorResponse = {\"httpCode\":\"401\",\n    \"httpMessage\":\"Unauthorized\",\n    \"moreInformation\":\"Not authorized to invoke\"};\n    apim.setvariable('errorResponse',errorResponse);\n}\n\nfunction testDomain(url){\n\t//Check if url contains a //\n\tvar domain;\n\tif(url.match(new RegExp(\"//(.*)/\"))){\n\t\t//Extract the rest of the string after // to /\n\t\tdomain = url.match(new RegExp(\"//(.*)/\"))[1];\n\t}else if(url.match(new RegExp(\"//(.*)\"))){\n\t\t//Extract the rest of the string after // to /\n\t\tdomain = url.match(new RegExp(\"//(.*)\"))[1];\n\t}else if(url.match(new RegExp(\"(.*)/\"))){\n\t\t//Extract from the starting of the string till a /\n\t\tdomain = url.match(new RegExp(\"(.*)/\"))[1];\n\t}else{\n\t    domain = url;\n\t}\n\treturn endsWith(domain);\n};\n\nfunction endsWith(str) {\n\tvar allowedDomains = [\"alertsite.com\"];\n\tfor(var i =0;i<allowedDomains.length;i++){\n\t\tvar suffix = allowedDomains[i];\n\t\tif(str.indexOf(suffix, str.length - suffix.length) !== -1){\n\t\t\treturn true;\n\t\t}\n\t}\n    return false;\n};"
                - switch:
                    title: switch
                    case:
                      - condition: "apim.getvariable('errorResponse')"
                        execute:
                          - gatewayscript:
                              title: gatewayscript
                              version: 1.0.0
                              source: >-
                                apim.setvariable('message.body',apim.getvariable('errorResponse'));

                                apim.setvariable('message.status.code','401');

                                apim.output('application/json');
                      - otherwise:
                          - jwt-generate:
                              title: jwt-generate
                              iss-claim: issEBiz
                              exp-claim: '90'
                              version: 1.0.0
                              jwt: rmgAuthToken
                              sub-claim: sub
                              jws-jwk: hs256-key
                              jws-alg: HS256
                              aud-claim: aud
                          - jwt-generate:
                              title: jwt-generate
                              iss-claim: issAPIc
                              exp-claim: '90'
                              version: 1.0.0
                              jwt: recaptchaSession
                              sub-claim: sub
                              aud-claim: aud
                              jws-jwk: hs256-key
                              jws-alg: HS256
                          - gatewayscript:
                              title: gatewayscript
                              version: 1.0.0
                              source: >-
                                var rmgAuthToken
                                = apim.getvariable('rmgAuthToken');

                                var recaptchaSession
                                = apim.getvariable('recaptchaSession');

                                var response = {

                                     "rmgAuthToken" :rmgAuthToken,

                                      "recaptchaSession" :recaptchaSession

                                }

                                apim.setvariable('message.body',response);

                                apim.output('application/json');
                    version: 1.0.0
            - otherwise:
                - gatewayscript:
                    title: gatewayscript
                    version: 1.0.0
                    source: "var origin = apim.getvariable('request.headers.origin');\nif (testDomain(origin))\n   {\n     var aud = \"TAPIv2\";\n     var issEBiz = \"eBusiness\";\n     apim.setvariable('issEBiz',issEBiz);\n     apim.setvariable('aud',aud);\n     var issAPIc = \"apiconnect\";\n     apim.setvariable('issAPIc',issAPIc);\n   }\nelse {\n    var errorResponse = {\"httpCode\":\"401\",\n    \"httpMessage\":\"Unauthorized\",\n    \"moreInformation\":\"Not authorized to invoke\"};\n    apim.setvariable('errorResponse',errorResponse);\n}\n\nfunction testDomain(url){\n\t//Check if url contains a //\n\tvar domain;\n\tif(url.match(new RegExp(\"//(.*)/\"))){\n\t\t//Extract the rest of the string after // to /\n\t\tdomain = url.match(new RegExp(\"//(.*)/\"))[1];\n\t}else if(url.match(new RegExp(\"//(.*)\"))){\n\t\t//Extract the rest of the string after // to /\n\t\tdomain = url.match(new RegExp(\"//(.*)\"))[1];\n\t}else if(url.match(new RegExp(\"(.*)/\"))){\n\t\t//Extract from the starting of the string till a /\n\t\tdomain = url.match(new RegExp(\"(.*)/\"))[1];\n\t}else{\n\t    domain = url;\n\t}\n\treturn endsWith(domain);\n};\n\nfunction endsWith(str) {\n\tvar allowedDomains = [\"alertsite.com\"];\n\tfor(var i =0;i<allowedDomains.length;i++){\n\t\tvar suffix = allowedDomains[i];\n\t\tif(str.indexOf(suffix, str.length - suffix.length) !== -1){\n\t\t\treturn true;\n\t\t}\n\t}\n    return false;\n};"
                - switch:
                    title: switch
                    case:
                      - condition: "apim.getvariable('errorResponse')"
                        execute:
                          - gatewayscript:
                              title: gatewayscript
                              version: 1.0.0
                              source: >-
                                apim.setvariable('message.body',apim.getvariable('errorResponse'));

                                apim.setvariable('message.status.code','401');

                                apim.output('application/json');
                      - otherwise:
                          - jwt-generate:
                              title: jwt-generate
                              iss-claim: issAPIc
                              exp-claim: '90'
                              version: 1.0.0
                              jwt: recaptchaSession
                              sub-claim: ''
                              jws-jwk: hs256-key
                              jws-alg: HS256
                              aud-claim: aud
                          - gatewayscript:
                              title: gatewayscript
                              version: 1.0.0
                              source: >-
                                var recaptchaSession
                                = apim.getvariable('recaptchaSession');

                                var response = {

                                      "recaptchaSession" :recaptchaSession

                                };

                                apim.setvariable('message.body',response);

                                apim.output('application/json');
                    version: 1.0.0
          version: 1.0.0
    catch: []
  phase: realized
  gateway: datapower-gateway
paths:
  /token:
    get:
      responses:
        '200':
          description: 200 OK
      parameters:
        - name: userId
          type: string
          required: false
          in: query
definitions: {}
tags: []
basePath: /authorisation
